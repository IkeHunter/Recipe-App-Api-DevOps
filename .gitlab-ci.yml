image:
  name: hashicorp/terraform:0.12.21
  entrypoint:  # overrides entrypoint to work with gitlab ci-cd
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'


stages:
  - Test and Lint  # unit tests
  - Build and Push  # build docker, push to ecr
  - Staging Plan  # run tf plan
  - Staging Apply  # apply tf
  - Production Plan  # run tf plan
  - Production Apply  # apply tf
  - Destroy  # tasks for destroying

Test and Lint:
  image: docker:19.03.5
  services:
    - docker:19.03.5-dind  # docker in docker
  stage: Test and Lint
  script:
    - apk add --update docker-compose
    - docker-compose run --rm app sh -c "python manage.py wait_for_db && python manage.py test && flake8"
  rules: # if merge req target branch is master or production and again if master/production branch is committed
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(master|production)$/ || $CI_COMMIT_BRANCH =~ /^(master|production)$/'

Validate Terraform:
  stage: Test and Lint
  script:
    - cd deploy/
    - terraform init -backend=false  # initialize tf first for provider code, don't need aws stuff (backend=false)
    - terraform validate
    - terraform fmt -check  # just show feedback, don't apply formating. fail if there's feedback
  rules: # same as above
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(master|production)$/ || $CI_COMMIT_BRANCH =~ /^(master|production)$/'

Build and Push:
  image: docker:19.03.5
  services:
    - docker:19.03.5-dind  # docker in docker
  stage: Build and Push
  script:
    - apk add python3
    - pip3 install awscli
    - docker build --compress -t $ECR_REPO:$CI_COMMIT_SHORT_SHA .  # builds docker image, make small, tag image with registry name:first 8 characters of commit
    - $(aws ecr get-login --no-include-email --region us-east-1)  # gets docker temp login command, authenticate with docker to aws
    - docker push $ECR_REPO:$CI_COMMIT_SHORT_SHA  # push to ecr
    - docker tag $ECR_REPO:$CI_COMMIT_SHORT_SHA $ECR_REPO:latest  # add second tag with :latest
    - docker push $ECR_REPO:latest  # push with latest tag
  rules: # only commit when commit to prod/master
    - if: '$CI_COMMIT_BRANCH =~ /^(master|production)$/'

Staging Plan: # push to staging first, test, then deploy from prod
  stage: Staging Plan
  script:
    - cd deploy/
    - export TF_VAR_ecr_image_api=$ECR_REPO:$CI_COMMIT_SHORT_SHA  # uses same tag ad defined in build/push, sets to new var (TF_VAR_...) and passes it to terraform
    - terraform init
    - terraform workspace select staging || terraform workspace new staging  # either select or create workspace staging - then select (auto behavior)
    - terraform plan  # for info, can look back and see what was changed. optionally set this stage to manual to check plan and accept before moving on
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(master|production)$/'

Staging Apply: # push to staging first, test, then deploy from prod
  stage: Staging Apply
  script:
    - cd deploy/  # each job is a fresh file system, so do this every time
    - export TF_VAR_ecr_image_api=$ECR_REPO:$CI_COMMIT_SHORT_SHA  # variables also don't pass between jobs
    - terraform init
    - terraform workspace select staging  # plan job already ran, so staging will exist
    - terraform apply -auto-approve  # won't ask if user is sure, it should be automated
  rules:  # some people make this manual if they want to be extra safe
    - if: '$CI_COMMIT_BRANCH =~ /^(master|production)$/'
    
Production Plan: # push to Production first, test, then deploy from prod
  stage: Production Plan
  script:
    - cd deploy/
    - export TF_VAR_ecr_image_api=$ECR_REPO:$CI_COMMIT_SHORT_SHA
    - terraform init
    - terraform workspace select production || terraform workspace new production
    - terraform plan
  rules: # only run when commiting to prod
    - if: '$CI_COMMIT_BRANCH == "production"'

Production Apply: # push to Production first, test, then deploy from prod
  stage: Production Apply
  script:
    - cd deploy/
    - export TF_VAR_ecr_image_api=$ECR_REPO:$CI_COMMIT_SHORT_SHA
    - terraform init
    - terraform workspace select production
    - terraform apply -auto-approve
  rules:
    - if: '$CI_COMMIT_BRANCH == "production"'
      when: manual  # when job manually called

Staging Destroy:
  stage: Destroy
  script:
    - echo "Run Terraform destroy for staging"
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(master|production)$/'
      when: manual  # when job manually called
      
Production Destroy:
  stage: Destroy
  script:
    - echo "Run Terraform destroy for Production"
  rules:
    - if: '$CI_COMMIT_BRANCH == "production"'
      when: manual  # when job manually called