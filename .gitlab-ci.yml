image:
  name: hashicorp/terraform:0.12.21
  entrypoint:  # overrides entrypoint to work with gitlab ci-cd
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'


stages:
  - Test and Lint  # unit tests
  - Build and Push  # build docker, push to ecr
  - Staging Plan  # run tf plan
  - Staging Apply  # apply tf
  - Production Plan  # run tf plan
  - Production Apply  # apply tf
  - Destroy  # tasks for destroying

Test and Lint:
  image: docker:19.03.5
  services:
    - docker:19.03.5-dind  # docker in docker
  stage: Test and Lint
  script:
    - apk add --update docker-compose
    - docker-compose run --rm app sh -c "python manage.py wait_for_db && python manage.py test && flake8"
  rules: # if merge req target branch is master or production and again if master/production branch is committed
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(master|production)$/ || $CI_COMMIT_BRANCH =~ /^(master|production)$/'

Validate Terraform:
  stage: Test and Lint
  script:
    - cd deploy/
    - terraform init -backend=false  # initialize tf first for provider code, don't need aws stuff (backend=false)
    - terraform validate
    - terraform fmt -check  # just show feedback, don't apply formating. fail if there's feedback
  rules: # same as above
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(master|production)$/ || $CI_COMMIT_BRANCH =~ /^(master|production)$/'

Build and Push:
  stage: Build and Push
  script:
    - echo "Build and push docker image"
  rules: # only commit when commit to prod/master
    - if: '$CI_COMMIT_BRANCH =~ /^(master|production)$/'

Staging Plan: # push to staging first, test, then deploy from prod
  stage: Staging Plan
  script:
    - echo "Run terraform plan for staging"
  rules: # same as above
    - if: '$CI_COMMIT_BRANCH =~ /^(master|production)$/'

Staging Apply: # push to staging first, test, then deploy from prod
  stage: Staging Apply
  script:
    - echo "Run terraform apply for staging"
  rules: # same as above
    - if: '$CI_COMMIT_BRANCH =~ /^(master|production)$/'
    
Production Plan: # push to Production first, test, then deploy from prod
  stage: Production Plan
  script:
    - echo "Run terraform plan for Production"
  rules: # only run when commiting to prod
    - if: '$CI_COMMIT_BRANCH == "production"'

Production Apply: # push to Production first, test, then deploy from prod
  stage: Production Apply
  script:
    - echo "Run terraform apply for Production"
  rules: # same as above
    - if: '$CI_COMMIT_BRANCH == "production"'
      when: manual  # when job manually called

Staging Destroy:
  stage: Destroy
  script:
    - echo "Run Terraform destroy for staging"
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(master|production)$/'
      when: manual  # when job manually called
      
Production Destroy:
  stage: Destroy
  script:
    - echo "Run Terraform destroy for Production"
  rules:
    - if: '$CI_COMMIT_BRANCH == "production"'
      when: manual  # when job manually called